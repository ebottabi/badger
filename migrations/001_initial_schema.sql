-- Badger Trading Bot - Initial Database Schema
-- Migration: 001_initial_schema.sql
-- Description: Creates all core tables for the wallet intelligence system

-- =============================================================================
-- CORE DATA TABLES
-- =============================================================================

-- Market events from Solana blockchain
CREATE TABLE IF NOT EXISTS market_events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    event_id TEXT UNIQUE NOT NULL,
    event_type TEXT NOT NULL,
    timestamp INTEGER NOT NULL,
    slot INTEGER NOT NULL,
    data TEXT NOT NULL, -- JSON data
    processed_at INTEGER NOT NULL,
    created_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- Trading signals generated by the system
CREATE TABLE IF NOT EXISTS trading_signals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    signal_id TEXT UNIQUE NOT NULL,
    signal_type TEXT NOT NULL, -- BUY, SELL, HOLD
    token_mint TEXT NOT NULL,
    confidence REAL NOT NULL,
    amount_sol REAL NOT NULL,
    reason TEXT NOT NULL,
    timestamp INTEGER NOT NULL,
    data TEXT, -- JSON data
    processed_at INTEGER,
    created_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- Token launch tracking for age calculations
CREATE TABLE IF NOT EXISTS token_launches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    token_mint TEXT UNIQUE NOT NULL,
    launch_timestamp INTEGER NOT NULL,
    created_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- =============================================================================
-- INTELLIGENCE SYSTEM TABLES
-- =============================================================================

-- Insider wallet profiles and scoring
CREATE TABLE IF NOT EXISTS insider_wallets (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    address TEXT UNIQUE NOT NULL,
    confidence_score REAL NOT NULL DEFAULT 0.0,
    win_rate REAL NOT NULL DEFAULT 0.0,
    avg_profit_percentage REAL NOT NULL DEFAULT 0.0,
    early_entry_score REAL NOT NULL DEFAULT 0.0,
    total_trades INTEGER NOT NULL DEFAULT 0,
    profitable_trades INTEGER NOT NULL DEFAULT 0,
    last_trade_timestamp INTEGER NOT NULL DEFAULT 0,
    first_detected_timestamp INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
    recent_activity_score REAL NOT NULL DEFAULT 0.0,
    status TEXT NOT NULL DEFAULT 'MONITORING', -- ACTIVE, MONITORING, BLACKLISTED, COOLDOWN
    created_at INTEGER DEFAULT (strftime('%s', 'now')),
    updated_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- Wallet trade analysis for insider detection
CREATE TABLE IF NOT EXISTS wallet_trade_analysis (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    wallet_address TEXT NOT NULL,
    token_mint TEXT NOT NULL,
    trade_type TEXT NOT NULL, -- BUY, SELL
    amount_sol REAL NOT NULL,
    price REAL NOT NULL,
    timestamp INTEGER NOT NULL,
    profit_loss REAL,
    profit_percentage REAL,
    early_entry_minutes INTEGER, -- How many minutes after token launch
    detected_at INTEGER DEFAULT (strftime('%s', 'now')),
    created_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- Wallet discovery audit log
CREATE TABLE IF NOT EXISTS wallet_discovery_log (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    wallet_address TEXT NOT NULL,
    discovery_method TEXT NOT NULL, -- EARLY_ENTRY, HIGH_PROFIT, PATTERN_MATCH, MANUAL
    initial_confidence REAL NOT NULL,
    qualifying_trades INTEGER NOT NULL,
    discovered_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- =============================================================================
-- COPY TRADING TABLES
-- =============================================================================

-- Copy trading signals generated for execution
CREATE TABLE IF NOT EXISTS copy_trading_signals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    insider_wallet TEXT NOT NULL,
    token_mint TEXT NOT NULL,
    signal_type TEXT NOT NULL, -- BUY, SELL
    insider_confidence REAL NOT NULL,
    position_size_sol REAL NOT NULL,
    copy_delay_seconds INTEGER NOT NULL,
    urgency TEXT NOT NULL, -- IMMEDIATE, HIGH, NORMAL
    signal_timestamp INTEGER NOT NULL,
    execution_timestamp INTEGER,
    execution_status TEXT DEFAULT 'PENDING', -- PENDING, EXECUTED, FAILED, CANCELLED
    transaction_hash TEXT,
    created_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- Copy trading performance tracking
CREATE TABLE IF NOT EXISTS copy_trading_performance (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    copy_signal_id INTEGER NOT NULL,
    insider_wallet TEXT NOT NULL,
    token_mint TEXT NOT NULL,
    our_entry_price REAL,
    our_exit_price REAL,
    profit_loss_sol REAL,
    profit_percentage REAL,
    hold_duration_seconds INTEGER,
    result TEXT, -- WIN, LOSS, PENDING
    exit_reason TEXT, -- INSIDER_EXIT, TAKE_PROFIT, STOP_LOSS, TIME_DECAY, MANUAL
    created_at INTEGER DEFAULT (strftime('%s', 'now')),
    FOREIGN KEY (copy_signal_id) REFERENCES copy_trading_signals(id)
);

-- =============================================================================
-- POSITION TRACKING TABLES
-- =============================================================================

-- Active and historical positions
CREATE TABLE IF NOT EXISTS positions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    position_id TEXT UNIQUE NOT NULL,
    token_mint TEXT NOT NULL,
    entry_price REAL NOT NULL,
    exit_price REAL,
    quantity REAL NOT NULL,
    entry_timestamp INTEGER NOT NULL,
    exit_timestamp INTEGER,
    status TEXT NOT NULL DEFAULT 'OPEN', -- OPEN, CLOSED
    pnl REAL DEFAULT 0.0,
    pnl_percentage REAL DEFAULT 0.0,
    insider_wallet TEXT, -- If this is a copy trade
    signal_id INTEGER, -- Reference to copy trading signal
    created_at INTEGER DEFAULT (strftime('%s', 'now')),
    updated_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- Position update history for audit trail
CREATE TABLE IF NOT EXISTS position_updates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    position_id INTEGER NOT NULL,
    update_type TEXT NOT NULL, -- ENTRY, EXIT, PARTIAL_EXIT, PRICE_UPDATE
    old_value REAL,
    new_value REAL,
    timestamp INTEGER DEFAULT (strftime('%s', 'now')),
    FOREIGN KEY (position_id) REFERENCES positions(id)
);

-- =============================================================================
-- ANALYTICS AND PERFORMANCE TABLES
-- =============================================================================

-- Wallet performance scores for quick lookup
CREATE TABLE IF NOT EXISTS wallet_scores (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    wallet_address TEXT UNIQUE NOT NULL,
    insider_score REAL NOT NULL DEFAULT 0.0,
    risk_score REAL NOT NULL DEFAULT 0.0,
    consistency_score REAL NOT NULL DEFAULT 0.0,
    volume_score REAL NOT NULL DEFAULT 0.0,
    recent_performance REAL NOT NULL DEFAULT 0.0,
    total_trades INTEGER NOT NULL DEFAULT 0,
    win_rate REAL NOT NULL DEFAULT 0.0,
    avg_profit REAL NOT NULL DEFAULT 0.0,
    last_updated INTEGER DEFAULT (strftime('%s', 'now'))
);

-- Trading session tracking
CREATE TABLE IF NOT EXISTS trading_sessions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    session_id TEXT UNIQUE NOT NULL,
    start_time INTEGER NOT NULL,
    end_time INTEGER,
    status TEXT NOT NULL DEFAULT 'ACTIVE', -- ACTIVE, COMPLETED, ABORTED
    total_signals INTEGER DEFAULT 0,
    executed_trades INTEGER DEFAULT 0,
    total_pnl REAL DEFAULT 0.0,
    created_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- Performance snapshots for historical analysis
CREATE TABLE IF NOT EXISTS performance_snapshots (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    snapshot_timestamp INTEGER NOT NULL,
    total_positions INTEGER NOT NULL,
    open_positions INTEGER NOT NULL,
    closed_positions INTEGER NOT NULL,
    total_pnl REAL NOT NULL,
    win_rate REAL NOT NULL,
    avg_hold_time INTEGER NOT NULL,
    active_insiders INTEGER NOT NULL,
    data TEXT, -- JSON with detailed metrics
    created_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- System session statistics
CREATE TABLE IF NOT EXISTS session_stats (
    id INTEGER PRIMARY KEY DEFAULT 1,
    events_processed INTEGER DEFAULT 0,
    signals_generated INTEGER DEFAULT 0,
    trades_executed INTEGER DEFAULT 0,
    total_pnl REAL DEFAULT 0.0,
    session_start INTEGER DEFAULT (strftime('%s', 'now')),
    last_updated INTEGER DEFAULT (strftime('%s', 'now')),
    CHECK (id = 1)
);

-- =============================================================================
-- ARCHIVED DATA TABLES
-- =============================================================================

-- Archived market events (for cleanup)
CREATE TABLE IF NOT EXISTS archived_market_events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    original_id INTEGER NOT NULL,
    event_id TEXT NOT NULL,
    event_type TEXT NOT NULL,
    timestamp INTEGER NOT NULL,
    slot INTEGER NOT NULL,
    data TEXT NOT NULL,
    processed_at INTEGER NOT NULL,
    archived_at INTEGER DEFAULT (strftime('%s', 'now'))
);

-- =============================================================================
-- INDEXES FOR PERFORMANCE
-- =============================================================================

-- Market events indexes
CREATE INDEX IF NOT EXISTS idx_market_events_timestamp ON market_events(timestamp);
CREATE INDEX IF NOT EXISTS idx_market_events_event_type ON market_events(event_type);
CREATE INDEX IF NOT EXISTS idx_market_events_slot ON market_events(slot);

-- Trading signals indexes
CREATE INDEX IF NOT EXISTS idx_trading_signals_timestamp ON trading_signals(timestamp);
CREATE INDEX IF NOT EXISTS idx_trading_signals_token_mint ON trading_signals(token_mint);
CREATE INDEX IF NOT EXISTS idx_trading_signals_signal_type ON trading_signals(signal_type);

-- Token launches index
CREATE INDEX IF NOT EXISTS idx_token_launches_token_mint ON token_launches(token_mint);
CREATE INDEX IF NOT EXISTS idx_token_launches_launch_timestamp ON token_launches(launch_timestamp);

-- Insider wallets indexes
CREATE INDEX IF NOT EXISTS idx_insider_wallets_address ON insider_wallets(address);
CREATE INDEX IF NOT EXISTS idx_insider_wallets_confidence_score ON insider_wallets(confidence_score DESC);
CREATE INDEX IF NOT EXISTS idx_insider_wallets_status ON insider_wallets(status);
CREATE INDEX IF NOT EXISTS idx_insider_wallets_last_trade ON insider_wallets(last_trade_timestamp DESC);

-- Wallet trade analysis indexes
CREATE INDEX IF NOT EXISTS idx_wallet_trade_analysis_wallet ON wallet_trade_analysis(wallet_address);
CREATE INDEX IF NOT EXISTS idx_wallet_trade_analysis_token ON wallet_trade_analysis(token_mint);
CREATE INDEX IF NOT EXISTS idx_wallet_trade_analysis_timestamp ON wallet_trade_analysis(timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_wallet_trade_analysis_profit ON wallet_trade_analysis(profit_percentage DESC);

-- Copy trading indexes
CREATE INDEX IF NOT EXISTS idx_copy_trading_signals_insider ON copy_trading_signals(insider_wallet);
CREATE INDEX IF NOT EXISTS idx_copy_trading_signals_token ON copy_trading_signals(token_mint);
CREATE INDEX IF NOT EXISTS idx_copy_trading_signals_timestamp ON copy_trading_signals(signal_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_copy_trading_signals_status ON copy_trading_signals(execution_status);

CREATE INDEX IF NOT EXISTS idx_copy_trading_performance_insider ON copy_trading_performance(insider_wallet);
CREATE INDEX IF NOT EXISTS idx_copy_trading_performance_result ON copy_trading_performance(result);
CREATE INDEX IF NOT EXISTS idx_copy_trading_performance_created ON copy_trading_performance(created_at DESC);

-- Positions indexes
CREATE INDEX IF NOT EXISTS idx_positions_token_mint ON positions(token_mint);
CREATE INDEX IF NOT EXISTS idx_positions_status ON positions(status);
CREATE INDEX IF NOT EXISTS idx_positions_insider_wallet ON positions(insider_wallet);
CREATE INDEX IF NOT EXISTS idx_positions_entry_timestamp ON positions(entry_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_positions_pnl ON positions(pnl DESC);

-- Wallet scores indexes
CREATE INDEX IF NOT EXISTS idx_wallet_scores_insider_score ON wallet_scores(insider_score DESC);
CREATE INDEX IF NOT EXISTS idx_wallet_scores_win_rate ON wallet_scores(win_rate DESC);
CREATE INDEX IF NOT EXISTS idx_wallet_scores_last_updated ON wallet_scores(last_updated DESC);

-- Performance snapshots index
CREATE INDEX IF NOT EXISTS idx_performance_snapshots_timestamp ON performance_snapshots(snapshot_timestamp DESC);

-- =============================================================================
-- INITIAL DATA
-- =============================================================================

-- Initialize session stats
INSERT OR IGNORE INTO session_stats (id) VALUES (1);

-- Migration completed
-- Version: 001
-- Tables created: 18
-- Indexes created: 27